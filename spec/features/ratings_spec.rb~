require 'spec_helper'
include OwnTestHelper

describe "Rating" do
  let!(:brewery) { FactoryGirl.create :brewery, name:"Koff" }
  let!(:beer1) { FactoryGirl.create :beer, name:"iso 3", brewery:brewery }
  let!(:beer2) { FactoryGirl.create :beer, name:"Karhu", brewery:brewery }
  let!(:user) { FactoryGirl.create :user }

  before :each do
   sign_in(username:"Pekka", password:"Foobar1")
  end

  it "when given, is registered to the beer and user who is signed in" do
    visit new_rating_path
    select('iso 3', from:'rating[beer_id]')
    fill_in('rating[score]', with:'15')

    expect{
      click_button "Create Rating"
    }.to change{Rating.count}.from(0).to(1)

    expect(user.ratings.count).to eq(1)
    expect(beer1.ratings.count).to eq(1)
    expect(beer1.average_rating).to eq(15.0)
  end

  it "should show the correct amount of ratings in ratings page" do
     visit new_rating_path
    select('iso 3', from:'rating[beer_id]')
    fill_in('rating[score]', with:'15')
     click_button "Create Rating"

    visit ratings_path
    
    expect(page).to have_content 'List of ratings'
    expect(page).to have_content 'Nubmer of ratings: 1'
  end
 it "should show users ratings on users page" do
     visit new_rating_path
    select('iso 3', from:'rating[beer_id]')
    fill_in('rating[score]', with:'15')
     click_button "Create Rating"

    visit user_path(user)
   
    expect(page).to have_content 'has made 1 rating,'
    expect(page).to have_content 'iso 3'
  
  end
   it "should not show rating on users page if rating is deleted" do
     visit new_rating_path
    select('iso 3', from:'rating[beer_id]')
    fill_in('rating[score]', with:'15')
     click_button "Create Rating"

    visit user_path(user)
    
    click_link "Delete"
save_and_open_page
    expect(page).to have_content 'user has not yet been rating beers! '
   
  
  end
end
